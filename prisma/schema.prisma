datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Period {
  id           String        @id @default(uuid())
  startDate    DateTime
  endDate      DateTime
  displayName  String
  isActive     Boolean?
  degree       Degree?
  periodConfig PeriodConfig?
  createdAt    DateTime      @default(now())
}

model Degree {
  id        String  @id @default(uuid())
  name      String
  period    Period  @relation(fields: [periodId], references: [id], onDelete: Cascade)
  periodId  String  @unique
  manager   Manager @relation(fields: [managerId], references: [id])
  managerId String  @unique
  grades    Grade[]
}

model Manager {
  id       String  @id @default(uuid())
  degree   Degree?
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  periodId String
}

model Grade {
  id        String     @id @default(uuid())
  number    String
  parallel  String
  degree    Degree     @relation(fields: [degreeId], references: [id], onDelete: Cascade)
  degreeId  String
  students  Student[]
  schedules Schedule[]
  periodId  String
}

model Student {
  id                    String                         @id @default(uuid())
  grade                 Grade                          @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  gradeId               String
  lessonPlansValidation LessonPlanValidationTracking[]
  user                  User                           @relation(fields: [userId], references: [id])
  userId                String
  periodId              String
}

model Teacher {
  id           String                @id @default(uuid())
  schedules    Schedule[]
  user         User                  @relation(fields: [userId], references: [id])
  userId       String
  eventsConfig TeacherEventsConfig[]
  periodId     String
}

model TeacherEventsConfig {
  id        String   @id @default(uuid())
  eventName String
  metadata  Json?
  periodId  String
  teacher   Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String
}

model Subject {
  id        String     @id @default(uuid())
  name      String
  schedules Schedule[]
  periodId  String
}

model Schedule {
  id          String       @id @default(uuid())
  metadata    Json?
  grade       Grade        @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  gradeId     String
  subject     Subject      @relation(fields: [subjectId], references: [id])
  subjectId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  teacherId   String
  lessonPlans LessonPlan[]
  periodId    String
}

model LessonPlan {
  id                    String                         @id @default(uuid())
  lessonPlanNumber      Int?
  date                  DateTime
  topic                 String
  content               String?
  description           String?
  purposeOfClass        String?
  bibliography          String?
  schedule              Schedule                       @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId            String
  notification          String?
  maximumValidationDate DateTime?
  notificationDate      DateTime?
  resources             Json?
  hasQualified          Boolean                        @default(false)
  validationsTracking   LessonPlanValidationTracking[]
  periodId              String
  createdAt             DateTime                       @default(now())
}

model LessonPlanValidationTracking {
  id           String     @id @default(uuid())
  isValidated  Boolean    @default(false)
  lessonPlan   LessonPlan @relation(fields: [lessonPlanId], references: [id], onDelete: Cascade)
  lessonPlanId String
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String
  periodId     String?
  isAgree      Boolean?
}

model User {
  id                 String          @id @default(uuid())
  name               String
  lastName           String
  email              String          @unique
  password           String?
  displayName        String
  refreshToken       String?
  phoneNumber        Int?
  city               String?
  identificationCard String?
  isActive           Boolean?        @default(true)
  manager            Manager[]
  student            Student[]
  teacher            Teacher[]
  roles              Role[]
  registerConfig     RegisterConfig?
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model RegisterConfig {
  id            String   @id @default(uuid())
  registerToken String?  @unique @default(uuid())
  isRegistered  Boolean? @default(false)
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
}

model PeriodConfig {
  id                        String @id @default(uuid())
  minimumStudentsToEvaluate Int
  period                    Period @relation(fields: [periodId], references: [id], onDelete: Cascade)
  periodId                  String @unique
}
